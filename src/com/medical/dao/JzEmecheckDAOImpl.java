package com.medical.dao;

import com.medical.model.JzEmecheck;
import com.medical.model.JzEmecheckExample;
import java.math.BigDecimal;
import java.util.List;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class JzEmecheckDAOImpl extends SqlMapClientDaoSupport implements JzEmecheckDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:47 CST 2009
     */
    public JzEmecheckDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int countByExample(JzEmecheckExample example) {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("JZ_EMECHECK.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int deleteByExample(JzEmecheckExample example) {
        int rows = getSqlMapClientTemplate().delete("JZ_EMECHECK.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int deleteByPrimaryKey(BigDecimal emecheckId) {
        JzEmecheck key = new JzEmecheck();
        key.setEmecheckId(emecheckId);
        int rows = getSqlMapClientTemplate().delete("JZ_EMECHECK.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public BigDecimal insert(JzEmecheck record) {
        Object newKey = getSqlMapClientTemplate().insert("JZ_EMECHECK.ibatorgenerated_insert", record);
        return (BigDecimal) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public BigDecimal insertSelective(JzEmecheck record) {
        Object newKey = getSqlMapClientTemplate().insert("JZ_EMECHECK.ibatorgenerated_insertSelective", record);
        return (BigDecimal) newKey;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    @SuppressWarnings("unchecked")
    public List<JzEmecheck> selectByExample(JzEmecheckExample example) {
        List<JzEmecheck> list = getSqlMapClientTemplate().queryForList("JZ_EMECHECK.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public JzEmecheck selectByPrimaryKey(BigDecimal emecheckId) {
        JzEmecheck key = new JzEmecheck();
        key.setEmecheckId(emecheckId);
        JzEmecheck record = (JzEmecheck) getSqlMapClientTemplate().queryForObject("JZ_EMECHECK.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int updateByExampleSelective(JzEmecheck record, JzEmecheckExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("JZ_EMECHECK.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int updateByExample(JzEmecheck record, JzEmecheckExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("JZ_EMECHECK.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int updateByPrimaryKeySelective(JzEmecheck record) {
        int rows = getSqlMapClientTemplate().update("JZ_EMECHECK.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    public int updateByPrimaryKey(JzEmecheck record) {
        int rows = getSqlMapClientTemplate().update("JZ_EMECHECK.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table YLJZN.JZ_EMECHECK
     *
     * @ibatorgenerated Wed Sep 30 09:34:48 CST 2009
     */
    private static class UpdateByExampleParms extends JzEmecheckExample {
        private Object record;

        public UpdateByExampleParms(Object record, JzEmecheckExample example) {
            super(example);
            this.record = record;
        }

        @SuppressWarnings("unused")
		public Object getRecord() {
            return record;
        }
    }
}